{
  "clock": 138,
  "documentClock": 138,
  "tombstones": {
    "shape:xM9rgM73zokWKKTA": 42,
    "shape:gOpdMu5c1jvP7ZzF": 45
  },
  "tombstoneHistoryStartsAtClock": 1,
  "schema": {
    "schemaVersion": 2,
    "sequences": {
      "com.tldraw.store": 5,
      "com.tldraw.asset": 1,
      "com.tldraw.camera": 1,
      "com.tldraw.canvas_storage": 1,
      "com.tldraw.document": 2,
      "com.tldraw.instance": 25,
      "com.tldraw.instance_page_state": 5,
      "com.tldraw.page": 1,
      "com.tldraw.instance_presence": 6,
      "com.tldraw.pointer": 1,
      "com.tldraw.shape": 4,
      "com.tldraw.asset.bookmark": 2,
      "com.tldraw.asset.image": 5,
      "com.tldraw.asset.video": 5,
      "com.tldraw.shape.arrow": 7,
      "com.tldraw.shape.bookmark": 2,
      "com.tldraw.shape.draw": 3,
      "com.tldraw.shape.embed": 4,
      "com.tldraw.shape.frame": 1,
      "com.tldraw.shape.geo": 12,
      "com.tldraw.shape.group": 0,
      "com.tldraw.shape.highlight": 1,
      "com.tldraw.shape.image": 5,
      "com.tldraw.shape.line": 6,
      "com.tldraw.shape.note": 9,
      "com.tldraw.shape.text": 4,
      "com.tldraw.shape.video": 4,
      "com.tldraw.shape.miyagi-widget": 0,
      "com.tldraw.shape.univer": 0,
      "com.tldraw.shape.block": 0,
      "com.tldraw.shape.canvas-link": 0,
      "com.tldraw.shape.file": 0,
      "com.tldraw.binding.arrow": 1
    }
  },
  "documents": [
    {
      "state": {
        "gridSize": 10,
        "name": "",
        "meta": {
          "roomId": "room-b444df45-3b52-407c-89c5-bcd5a99cea48",
          "canvasMode": "freeform",
          "canvasName": "DeepSpace"
        },
        "id": "document:document",
        "typeName": "document"
      },
      "lastChangedClock": 2
    },
    {
      "state": {
        "meta": {},
        "id": "page:mqau0cKtmjAZmfEF6Lz1x",
        "name": "Page 1",
        "index": "a1",
        "typeName": "page"
      },
      "lastChangedClock": 0
    },
    {
      "state": {
        "widgets": {
          "shape:xM9rgM73zokWKKTA": {
            "__widget_config": "{\"roomId\":\"room-b444df45-3b52-407c-89c5-bcd5a99cea48\",\"pageId\":\"page:mqau0cKtmjAZmfEF6Lz1x\",\"shapeId\":\"shape:xM9rgM73zokWKKTA\",\"templateHandle\":\"Sheeeeeeeeeeep\"}"
          },
          "shape:gOpdMu5c1jvP7ZzF": {
            "__widget_config": "{\"roomId\":\"room-b444df45-3b52-407c-89c5-bcd5a99cea48\",\"pageId\":\"page:mqau0cKtmjAZmfEF6Lz1x\",\"shapeId\":\"shape:gOpdMu5c1jvP7ZzF\",\"templateHandle\":\"email-composer-react\"}"
          },
          "shape:pn3PKqfdLyGzFHkt": {
            "__widget_config": "{\"roomId\":\"room-b444df45-3b52-407c-89c5-bcd5a99cea48\",\"pageId\":\"page:mqau0cKtmjAZmfEF6Lz1x\",\"shapeId\":\"shape:pn3PKqfdLyGzFHkt\",\"templateHandle\":\"notepad-react-test\"}",
            "notepad-content": "fassafsafafs"
          },
          "shape:JqDqsb60gaWjjn23": {
            "__widget_config": "{\"roomId\":\"room-b444df45-3b52-407c-89c5-bcd5a99cea48\",\"pageId\":\"page:mqau0cKtmjAZmfEF6Lz1x\",\"shapeId\":\"shape:JqDqsb60gaWjjn23\",\"templateHandle\":\"stream-widget\"}"
          }
        },
        "global": {},
        "id": "canvas_storage:main",
        "typeName": "canvas_storage"
      },
      "lastChangedClock": 138
    },
    {
      "state": {
        "id": "shape:pn3PKqfdLyGzFHkt",
        "typeName": "shape",
        "type": "miyagi-widget",
        "parentId": "page:mqau0cKtmjAZmfEF6Lz1x",
        "index": "a1",
        "x": 125.78784468058359,
        "y": 226.22801552034088,
        "rotation": 0,
        "isLocked": false,
        "opacity": 1,
        "meta": {
          "initializationState": "ready"
        },
        "props": {
          "w": 497.96068036282327,
          "h": 350.470390544587,
          "widgetId": "notepad-react-test_1758902820155",
          "templateHandle": "notepad-react-test",
          "htmlContent": "<!DOCTYPE html>\n<html>\n<head>\n  <title>React Widget</title>\n  <script crossorigin src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>\n  <script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>\n  <style>\n    body { \n      margin: 0; \n      padding: 0; \n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    }\n    #react-root { \n      width: 100%; \n      height: 100vh; \n      display: flex;\n      flex-direction: column;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"react-root\"></div>\n  \n  <script>\n    // Compiled JSX code\n    \n    // Extract all React hooks dynamically (present and future)\n    const reactHooks = {};\n    Object.keys(React).forEach(key => {\n      if (key.startsWith('use') && typeof React[key] === 'function') {\n        reactHooks[key] = React[key];\n      }\n    });\n    \n    // Destructure all available hooks for easy use\n    const {\n      useState, useEffect, useRef, useMemo, useCallback, useContext, \n      useReducer, useLayoutEffect, useImperativeHandle, useDebugValue,\n      useDeferredValue, useId, useInsertionEffect, useSyncExternalStore,\n      useTransition, ...otherHooks\n    } = { ...reactHooks, ...React };\n    \n    // Custom hooks for Miyagi widgets\n    // useStorage hook will be injected by MiyagiStorageService\n    // useGlobalStorage hook will be injected by MiyagiStorageService\n    \n    function NotepadWidget() {\n  // Use our injected storage hook - this will automatically re-render when storage changes\n  const [content, setContent] = useStorage('notepad-content', '');\n  const textareaRef = useRef(null);\n\n  // Handle content changes\n  const handleContentChange = e => {\n    setContent(e.target.value);\n  };\n\n  // Clear notes\n  const clearNotes = () => {\n    if (confirm('Clear all notes?')) {\n      setContent('');\n      textareaRef.current?.focus();\n    }\n  };\n\n  // Auto-focus on mount\n  React.useEffect(() => {\n    setTimeout(() => textareaRef.current?.focus(), 100);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: 0,\n      padding: '16px',\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n      background: '#fffef7',\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      boxSizing: 'border-box'\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '12px',\n      paddingBottom: '8px',\n      borderBottom: '1px solid #e5e7eb'\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: '16px',\n      fontWeight: 600,\n      color: '#374151'\n    }\n  }, \"\\uD83D\\uDCDD Quick Notes (React Test)\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearNotes,\n    style: {\n      marginLeft: 'auto',\n      padding: '4px 8px',\n      border: 'none',\n      borderRadius: '4px',\n      background: '#f3f4f6',\n      color: '#6b7280',\n      fontSize: '12px',\n      cursor: 'pointer'\n    }\n  }, \"Clear\")), /*#__PURE__*/React.createElement(\"textarea\", {\n    ref: textareaRef,\n    value: content,\n    onChange: handleContentChange,\n    placeholder: \"Start typing your notes here...\",\n    style: {\n      flex: 1,\n      border: 'none',\n      outline: 'none',\n      resize: 'none',\n      background: 'transparent',\n      fontFamily: 'inherit',\n      fontSize: '14px',\n      lineHeight: 1.5,\n      color: '#374151',\n      minHeight: '200px'\n    }\n  }));\n}\n\n// Export the widget component - the injection script will handle rendering\nconst WidgetComponent = NotepadWidget;\n    \n    \n    // Auto-render when DOM is ready\n    document.addEventListener('DOMContentLoaded', function() {\n      const root = ReactDOM.createRoot(document.getElementById('react-root'));\n      root.render(React.createElement(WidgetComponent));\n    });\n  </script>\n</body>\n</html>",
          "jsxContent": "import React, { useRef } from 'react';\n\nfunction NotepadWidget() {\n  // Use our injected storage hook - this will automatically re-render when storage changes\n  const [content, setContent] = useStorage('notepad-content', '');\n  const textareaRef = useRef(null);\n  \n  // Handle content changes\n  const handleContentChange = (e) => {\n    setContent(e.target.value);\n  };\n  \n  // Clear notes\n  const clearNotes = () => {\n    if (confirm('Clear all notes?')) {\n      setContent('');\n      textareaRef.current?.focus();\n    }\n  };\n  \n  // Auto-focus on mount\n  React.useEffect(() => {\n    setTimeout(() => textareaRef.current?.focus(), 100);\n  }, []);\n  \n  return (\n    <div style={{\n      margin: 0,\n      padding: '16px',\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n      background: '#fffef7',\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      boxSizing: 'border-box'\n    }}>\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '12px',\n        paddingBottom: '8px',\n        borderBottom: '1px solid #e5e7eb'\n      }}>\n        <div style={{\n          fontSize: '16px',\n          fontWeight: 600,\n          color: '#374151'\n        }}>\n          üìù Quick Notes (React Test)\n        </div>\n        <button\n          onClick={clearNotes}\n          style={{\n            marginLeft: 'auto',\n            padding: '4px 8px',\n            border: 'none',\n            borderRadius: '4px',\n            background: '#f3f4f6',\n            color: '#6b7280',\n            fontSize: '12px',\n            cursor: 'pointer'\n          }}\n        >\n          Clear\n        </button>\n      </div>\n      \n      <textarea\n        ref={textareaRef}\n        value={content}\n        onChange={handleContentChange}\n        placeholder=\"Start typing your notes here...\"\n        style={{\n          flex: 1,\n          border: 'none',\n          outline: 'none',\n          resize: 'none',\n          background: 'transparent',\n          fontFamily: 'inherit',\n          fontSize: '14px',\n          lineHeight: 1.5,\n          color: '#374151',\n          minHeight: '200px'\n        }}\n      />\n    </div>\n  );\n}\n\n// Export the widget component - the injection script will handle rendering\nexport default NotepadWidget;",
          "color": "black",
          "zoomScale": 1
        }
      },
      "lastChangedClock": 128
    },
    {
      "state": {
        "id": "shape:JqDqsb60gaWjjn23",
        "typeName": "shape",
        "type": "miyagi-widget",
        "parentId": "page:mqau0cKtmjAZmfEF6Lz1x",
        "index": "a1",
        "x": 337.96272655033994,
        "y": 174.15521784442257,
        "rotation": 0,
        "isLocked": false,
        "opacity": 1,
        "meta": {
          "initializationState": "ready"
        },
        "props": {
          "w": 300,
          "h": 200,
          "widgetId": "stream-widget_1758921633607",
          "templateHandle": "stream-widget",
          "htmlContent": "<!DOCTYPE html>\n<html>\n<head>\n  <base href=\"/\" />\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: white;\n      height: 100vh;\n      overflow: hidden;\n    }\n    \n    .iframe-container {\n      width: 100%;\n      height: 100vh;\n      border: none;\n      border-radius: 8px;\n      overflow: hidden;\n    }\n  </style>\n</head>\n<body>\n  <iframe \n    class=\"iframe-container\"\n    src=\"/stream-widget\" \n    frameborder=\"0\"\n    id=\"streaming-iframe\"\n  ></iframe>\n\n  <script>\n    // Simple initialization - iframe gets context directly from parent's miyagiStorage\n    function initializeStreaming() {\n      const iframe = document.getElementById('streaming-iframe');\n      \n      // Wait for MiyagiStorage to be ready\n      if (!window.miyagiWidgetConfig) {\n        console.log('‚è≥ MiyagiStorage not ready, retrying...');\n        setTimeout(initializeStreaming, 100);\n        return;\n      }\n\n      console.log('‚úÖ Stream widget template ready - iframe will get context from miyagiStorage');\n      \n      // The iframe page will access miyagiStorage directly from the parent window\n      // No need for PostMessage or URL params for initialization\n    }\n\n    // Initialize when page loads\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', initializeStreaming);\n    } else {\n      initializeStreaming();\n    }\n\n    // Only listen for completion message from streaming page\n    window.addEventListener('message', function(event) {\n      if (event.data.type === 'streaming-widget-complete') {\n        console.log('üì® Received completion message, forwarding to parent...');\n        // Forward completion message to parent canvas\n        window.parent.postMessage({\n          type: 'streaming-widget-complete',\n          data: event.data.data\n        }, '*');\n      }\n    });\n  </script>\n</body>\n</html>",
          "color": "black",
          "zoomScale": 1
        }
      },
      "lastChangedClock": 138
    }
  ]
}